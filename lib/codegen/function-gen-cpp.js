"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const function_defs_1 = require("./function-defs");
function makePrettyFunctionName(functionName) {
    if (functionName === 'AU3_AutoItSetOption')
        return 'autoitSetOption';
    const match = /^AU3_(\w)(\w+)$/.exec(functionName);
    if (match === null)
        throw Error(`failed to get pretty name for ${functionName}`);
    return match[1].toLowerCase() + match[2];
}
exports.makePrettyFunctionName = makePrettyFunctionName;
class BindingFunction {
    constructor(name, def) {
        this.paramsSection = [];
        this.cleanupSection = [];
        this.name = name;
        this.def = def;
        const outParamIndex = this.def.params.findIndex(({ type }) => function_defs_1.outParam(type));
        if (outParamIndex === -1) {
            this.inParams = this.def.params;
            this.outParam = null;
        }
        else {
            this.inParams = this.def.params.filter((_, index) => index !== outParamIndex);
            this.outParam = this.def.params[outParamIndex];
        }
        this.inParams.forEach(this.addParam.bind(this));
    }
    addParam(param, index) {
        switch (param.type) {
            case function_defs_1.Param.IntBool:
                return this.addBoolParam(param, index);
            case function_defs_1.Param.Int:
            case function_defs_1.Param.Hwnd:
            case function_defs_1.Param.IntSetWindowState:
            case function_defs_1.Param.IntSendMode:
                return this.addIntParam(param, index);
            case function_defs_1.Param.InWstr:
            case function_defs_1.Param.InWstrCommand:
            case function_defs_1.Param.InWstrCommandExtra:
            case function_defs_1.Param.InWstrDescription:
            case function_defs_1.Param.InWstrMouseButton:
            case function_defs_1.Param.InWstrMouseScrollDirection:
                return this.addInWstrParam(param, index);
            case function_defs_1.Param.OutWstrSize:
                return this.addOutWstrParam(param, index);
            case function_defs_1.Param.OutPoint:
            case function_defs_1.Param.OutRectangle:
            case function_defs_1.Param.OutWstr:
                return;
        }
    }
    addBoolParam(param, index) {
        this.addMacroParam('BOOL', param, index);
    }
    addIntParam(param, index) {
        this.addMacroParam('INT', param, index);
    }
    addInWstrParam(param, index) {
        this.addMacroParam('INWSTR', param, index);
    }
    addOutWstrParam(param, index) {
        this.addMacroParam('OUTWSTR', param, index);
    }
    addMacroParam(macro, param, index) {
        this.paramsSection.push(`DL_ALLOC_${macro}_PARAM(${param.key}, ${index});`);
        this.cleanupSection.unshift(`DL_FREE_${macro}_PARAM(${param.key});`);
    }
    intro() {
        return `// This file is generated by src/codegen/function-gen.ts.
      #include <node_api.h>

      #include "helpers.h"
      #include "AutoItX3_DLL.h"

      napi_value dl_${this.name}(napi_env env, napi_callback_info cbinfo) {
        DL_PARAMS(${this.inParams.length});`;
    }
    outro() {
        return 'DL_RETURN; }';
    }
    outMacro(call) {
        if (this.outParam === null) {
            switch (this.def.return) {
                case function_defs_1.Return.Void:
                case function_defs_1.Return.IntDiscard:
                    return `DL_OUTPUT_VOID(${call})`;
                case function_defs_1.Return.Int:
                case function_defs_1.Return.IntCursor:
                case function_defs_1.Return.IntWindowState:
                case function_defs_1.Return.Hwnd:
                    return `DL_OUTPUT_INT(${call})`;
                case function_defs_1.Return.IntStatus:
                    return `DL_OUTPUT_INT_STATUS(${call}, ${this.name})`;
            }
        }
        else {
            switch (this.outParam.type) {
                case function_defs_1.Param.OutWstr:
                    return `DL_OUTPUT_WSTR(${call}, ${this.outParam.key})`;
                case function_defs_1.Param.OutPoint:
                    return `DL_OUTPUT_POINT(${call})`;
                case function_defs_1.Param.OutRectangle:
                    return `DL_OUTPUT_RECTANGLE(${call})`;
            }
        }
    }
    call() {
        const paramList = this.def.params.map(param => param.key).join(', ');
        return this.outMacro(`${this.name}(${paramList})`);
    }
    toString() {
        return [
            this.intro(),
            this.paramsSection.join(''),
            this.call(),
            this.cleanupSection.join(''),
            this.outro(),
        ].join('\n');
    }
}
function generateFunction(functionName, functionDef) {
    return new BindingFunction(functionName, functionDef).toString();
}
exports.generateFunction = generateFunction;
