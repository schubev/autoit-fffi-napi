import { FunctionDef, ParamDef, Param, Return, outParam } from './function-defs'

export function makePrettyFunctionName(functionName: string): string {
  if (functionName === 'AU3_AutoItSetOption') return 'autoitSetOption'
  const match = /^AU3_(\w)(\w+)$/.exec(functionName)
  if (match === null)
    throw Error(`failed to get pretty name for ${functionName}`)
  return match[1].toLowerCase() + match[2]
}

interface OutParamDef {
  type: Param.OutWstr | Param.OutPoint | Param.OutRectangle
}

class BindingFunction {
  readonly name: string
  readonly def: FunctionDef
  private paramsSection: string[] = []
  private cleanupSection: string[] = []
  private inParams: ParamDef[]
  private outParam: (ParamDef & OutParamDef) | null

  constructor(name: string, def: FunctionDef) {
    this.name = name
    this.def = def
    const outParamIndex = this.def.params.findIndex(({ type }) =>
      outParam(type),
    )
    if (outParamIndex === -1) {
      this.inParams = this.def.params
      this.outParam = null
    } else {
      this.inParams = this.def.params.filter(
        (_, index) => index !== outParamIndex,
      )
      this.outParam = this.def.params[outParamIndex] as any
    }
    this.inParams.forEach(this.addParam.bind(this))
  }

  private addParam(param: ParamDef, index: number): void {
    switch (param.type) {
      case Param.IntBool:
        return this.addBoolParam(param, index)
      case Param.Int:
      case Param.Hwnd:
      case Param.IntSetWindowState:
      case Param.IntSendMode:
        return this.addIntParam(param, index)
      case Param.InWstr:
      case Param.InWstrCommand:
      case Param.InWstrCommandExtra:
      case Param.InWstrDescription:
      case Param.InWstrMouseButton:
      case Param.InWstrMouseScrollDirection:
        return this.addInWstrParam(param, index)
      case Param.OutWstrSize:
        return this.addOutWstrSizeParam(param, index)
      case Param.OutPoint:
      case Param.OutRectangle:
      case Param.OutWstr:
        return
    }
  }

  private addBoolParam(param: ParamDef, index: number): void {
    this.addMacroParam('BOOL', param, index)
  }

  private addIntParam(param: ParamDef, index: number): void {
    this.addMacroParam('INT', param, index)
  }

  private addInWstrParam(param: ParamDef, index: number): void {
    this.addMacroParam('INWSTR', param, index)
  }

  private addOutWstrSizeParam(param: ParamDef, index: number): void {
    this.addMacroParam('INT', param, index)
  }

  private addMacroParam(macro: string, param: ParamDef, index: number): void {
    this.paramsSection.push(`DL_ALLOC_${macro}_PARAM(${param.key}, ${index});`)
    this.cleanupSection.unshift(`DL_FREE_${macro}_PARAM(${param.key});`)
  }

  private intro(): string {
    return `// This file is generated by src/codegen/function-gen.ts.
      #include <node_api.h>

      #include "helpers.h"
      #include "AutoItX3_DLL.h"

      napi_value dl_${this.name}(napi_env env, napi_callback_info cbinfo) {`
  }

  private paramsIntro(): string {
    if (this.inParams.length > 0) return `DL_PARAMS(${this.inParams.length});`
    else return ''
  }

  private outro(): string {
    return 'DL_RETURN; }'
  }

  private outMacro(call: string): string {
    if (this.outParam === null) {
      switch (this.def.return) {
        case Return.Void:
        case Return.IntDiscard:
          return `DL_OUTPUT_VOID(${call});`
        case Return.Int:
        case Return.IntCursor:
        case Return.IntWindowState:
        case Return.Hwnd:
          return `DL_OUTPUT_INT(${call});`
        case Return.IntStatus:
          return `DL_OUTPUT_INT_STATUS(${call}, ${this.name});`
      }
    } else {
      switch (this.outParam.type) {
        case Param.OutWstr:
          return `DL_OUTPUT_WSTR(${call}, ${this.outParam.key});`
        case Param.OutPoint:
          return `DL_OUTPUT_POINT(${call}, ${this.outParam.key}, ${this.name});`
        case Param.OutRectangle:
          return `DL_OUTPUT_RECTANGLE(${call}, ${this.outParam.key}, ${this.name});`
      }
    }
  }

  private call(): string {
    const paramList = this.def.params.map(param => param.key).join(', ')
    return this.outMacro(`${this.name}(${paramList})`)
  }

  toString(): string {
    return [
      this.intro(),
      this.paramsIntro(),
      this.paramsSection.join(''),
      this.call(),
      this.cleanupSection.join(''),
      this.outro(),
    ].join('')
  }
}

export function generateFunction(
  functionName: string,
  functionDef: FunctionDef,
): string {
  return new BindingFunction(functionName, functionDef).toString()
}
